name: N1-OpenWrt-23.05

on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - N1-OpenWrt-23.05

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Show system
      run: |
        echo -e "üí¨ Server information \n"
        echo -e "üíª Server running on Ubuntu: [ Release: $(cat /etc/os-release | grep VERSION_CODENAME | cut -d '=' -f2) / Host: $(arch) ] \n"
        echo -e "üßÆ Server CPU configuration information: \n$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "üíæ Server memory usage: \n$(free -h) \n"
        echo -e "üóÉÔ∏è Server space usag: \n$(df -hT ${GITHUB_WORKSPACE}) \n"
      
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 512
        root-reserve-mb: 4608
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'

    - name: Checkout
      uses: actions/checkout@v4

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q) 2>/dev/null
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install dwarves quilt llvm clang-13 lldb lld build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev \
          patch python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib p7zip-full msmtp libssl-dev texinfo libreadline-dev \
          libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget ccache curl \
          swig coreutils vim nano python3 python3-dev python3-pip python3-ply python3-pyelftools lrzsz scons
        pip3 install --user -U pylibfdt
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        sudo -E git config --global core.abbrev auto
        df -h

    - name: Prepare source code
      run: |
        sudo chown -R runner:runner /home/runner/work/build_openwrt
        echo "build_date=$(date +%Y.%m.%d)" >> ${GITHUB_ENV}
        cp -r ./scripts/openwrt-23.05/. ./
        /bin/bash 01_prepare_source_code.sh
        ln -sf /home/runner/work/build_openwrt/build_openwrt/openwrt /home/runner/work/_actions/ffuqiangg/amlogic-s9xxx-openwrt/main/openwrt

    - name: Prepare package
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        cp -r ../scripts/openwrt-23.05/. ./
        /bin/bash 02_prepare_package.sh

    - name: Convert Translation
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        /bin/bash 03_convert_translation.sh

    - name: Load custom configuration
      run: |
        latest_release="$(curl -s https://github.com/openwrt/openwrt/tags | grep -Eo "v[0-9\.]+-*r*c*[0-9]*.tar.gz" | sed -n '/23.05/p' | sed -n 1p | sed 's/.tar.gz//g' | sed 's/v//g')"
        kernel_version="$(cat openwrt/include/kernel-5.15 | grep -oE "[1-9]\.[1-9][0-9]*\.[1-9][0-9]*")"
        sed -i -e "s,DATE,${{ env.build_date }}," -e "s,WRT_SOUR,OpenWrt," -e "s,RELEASES,${latest_release}," ./openwrt/files/etc/banner
        echo "latest_release=${latest_release}" >> ${GITHUB_ENV}
        echo "kernel_version=${kernel_version}" >> ${GITHUB_ENV}
        echo "prerelease_symbol=true" >> ${GITHUB_ENV}
        if [[ "${{ github.event_name }}" == 'repository_dispatch' ]]; then
          echo "prerelease_symbol=false" >> ${GITHUB_ENV}
        fi

    - name: Make config
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        cp -f ../config/openwrt-23.05/config.seed .config
        make defconfig

    - name: Download package
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        make download -j50

    - name: Compile the firmware
      working-directory: ${{ github.workspace }}/openwrt
      id: compileopenwrt
      continue-on-error: true
      run: |
        IGNORE_ERRORS=1 make -j$(($(nproc) + 1))
        echo $?

    - name: If error
      if: steps.compileopenwrt.outcome == 'failure'
      run: |
         make -j1 V=s

    - name: Package firmware
      uses: ffuqiangg/amlogic-s9xxx-openwrt@main
      with:
        openwrt_path: openwrt/bin/targets/*/*/*rootfs.tar.gz
        openwrt_board: s905d
        kernel_repo: ffuqiangg/kernel_5.15.y
        openwrt_kernel: ${{ env.kernel_version }}
        kernel_usage: stable
        auto_kernel: false
        image_name: N1-OpenWrt-${{ env.latest_release }}-${{ env.build_date }}

    - name: Upload firmware to release
      uses: ncipollo/release-action@main
      with:
        tag: ${{ env.build_date }}
        allowUpdates: true
        replacesArtifacts: true
        prerelease: ${{ env.prerelease_symbol }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/N1-OpenWrt-${{ env.latest_release }}-${{ env.build_date }}.zip

    - name: telegram notification
      if: github.event_name == 'repository_dispatch'
      run: |
        firmware_num="$(curl -fsSL https://github.com/ffuqiangg/build_openwrt/releases/expanded_assets/${{ env.build_date }} | grep -oE "N1-.*.zip" | sort -u | wc -l)"
        MSG="
        *${{ env.build_date }}* Âõ∫‰ª∂ÁºñËØëÂÆåÊàê
        https://github.com/ffuqiangg/build\_openwrt/releases/tag/${{ env.build_date }}
        "
        if [[ "${firmware_num}" == 5 ]]; then
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}&parse_mode=MarkDown&disable_web_page_preview=true"
        fi
